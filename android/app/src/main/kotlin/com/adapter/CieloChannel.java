// Autogenerated from Pigeon (v0.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.adapter;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class CieloChannel {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PayResponse {
    private Map<Object, Object> orders;
    public Map<Object, Object> getOrders() { return orders; }
    public void setOrders(Map<Object, Object> setterArg) { this.orders = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("orders", orders);
      return toMapResult;
    }
    static PayResponse fromMap(Map<String, Object> map) {
      PayResponse fromMapResult = new PayResponse();
      Object orders = map.get("orders");
      fromMapResult.orders = (Map<Object, Object>)orders;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PayParam {
    private CieloCredentials cieloCredentials;
    public CieloCredentials getCieloCredentials() { return cieloCredentials; }
    public void setCieloCredentials(CieloCredentials setterArg) { this.cieloCredentials = setterArg; }

    private String reference;
    public String getReference() { return reference; }
    public void setReference(String setterArg) { this.reference = setterArg; }

    private String sku;
    public String getSku() { return sku; }
    public void setSku(String setterArg) { this.sku = setterArg; }

    private String description;
    public String getDescription() { return description; }
    public void setDescription(String setterArg) { this.description = setterArg; }

    private String unit_of_measure;
    public String getUnit_of_measure() { return unit_of_measure; }
    public void setUnit_of_measure(String setterArg) { this.unit_of_measure = setterArg; }

    private Long unit_price;
    public Long getUnit_price() { return unit_price; }
    public void setUnit_price(Long setterArg) { this.unit_price = setterArg; }

    private Long quantity;
    public Long getQuantity() { return quantity; }
    public void setQuantity(Long setterArg) { this.quantity = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("cieloCredentials", cieloCredentials.toMap());
      toMapResult.put("reference", reference);
      toMapResult.put("sku", sku);
      toMapResult.put("description", description);
      toMapResult.put("unit_of_measure", unit_of_measure);
      toMapResult.put("unit_price", unit_price);
      toMapResult.put("quantity", quantity);
      return toMapResult;
    }
    static PayParam fromMap(Map<String, Object> map) {
      PayParam fromMapResult = new PayParam();
      Object cieloCredentials = map.get("cieloCredentials");
      fromMapResult.cieloCredentials = CieloCredentials.fromMap((Map)cieloCredentials);
      Object reference = map.get("reference");
      fromMapResult.reference = (String)reference;
      Object sku = map.get("sku");
      fromMapResult.sku = (String)sku;
      Object description = map.get("description");
      fromMapResult.description = (String)description;
      Object unit_of_measure = map.get("unit_of_measure");
      fromMapResult.unit_of_measure = (String)unit_of_measure;
      Object unit_price = map.get("unit_price");
      fromMapResult.unit_price = (unit_price == null) ? null : ((unit_price instanceof Integer) ? (Integer)unit_price : (Long)unit_price);
      Object quantity = map.get("quantity");
      fromMapResult.quantity = (quantity == null) ? null : ((quantity instanceof Integer) ? (Integer)quantity : (Long)quantity);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CieloCredentials {
    private String clientID;
    public String getClientID() { return clientID; }
    public void setClientID(String setterArg) { this.clientID = setterArg; }

    private String accessToken;
    public String getAccessToken() { return accessToken; }
    public void setAccessToken(String setterArg) { this.accessToken = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("clientID", clientID);
      toMapResult.put("accessToken", accessToken);
      return toMapResult;
    }
    static CieloCredentials fromMap(Map<String, Object> map) {
      CieloCredentials fromMapResult = new CieloCredentials();
      Object clientID = map.get("clientID");
      fromMapResult.clientID = (String)clientID;
      Object accessToken = map.get("accessToken");
      fromMapResult.accessToken = (String)accessToken;
      return fromMapResult;
    }
  }

  public interface Result<T> {
    void success(T result);
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface CieloRun {
    void pay(PayParam arg, Result<PayResponse> result);

    /** Sets up an instance of `CieloRun` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, CieloRun api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CieloRun.pay", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              PayParam input = PayParam.fromMap((Map<String, Object>)message);
              api.pay(input, result -> { wrapped.put("result", result.toMap()); reply.reply(wrapped); });
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
