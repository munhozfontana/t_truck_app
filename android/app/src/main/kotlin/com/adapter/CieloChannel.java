// Autogenerated from Pigeon (v0.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.adapter;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class CieloChannel {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PayParam {
    private CieloCredentials cieloCredentials;
    public CieloCredentials getCieloCredentials() { return cieloCredentials; }
    public void setCieloCredentials(CieloCredentials setterArg) { this.cieloCredentials = setterArg; }

    private String reference;
    public String getReference() { return reference; }
    public void setReference(String setterArg) { this.reference = setterArg; }

    private List<Object> items;
    public List<Object> getItems() { return items; }
    public void setItems(List<Object> setterArg) { this.items = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("cieloCredentials", cieloCredentials.toMap());
      toMapResult.put("reference", reference);
      toMapResult.put("items", items);
      return toMapResult;
    }
    static PayParam fromMap(Map<String, Object> map) {
      PayParam fromMapResult = new PayParam();
      Object cieloCredentials = map.get("cieloCredentials");
      fromMapResult.cieloCredentials = CieloCredentials.fromMap((Map)cieloCredentials);
      Object reference = map.get("reference");
      fromMapResult.reference = (String)reference;
      Object items = map.get("items");
      fromMapResult.items = (List<Object>)items;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CieloCredentials {
    private String clientID;
    public String getClientID() { return clientID; }
    public void setClientID(String setterArg) { this.clientID = setterArg; }

    private String accessToken;
    public String getAccessToken() { return accessToken; }
    public void setAccessToken(String setterArg) { this.accessToken = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("clientID", clientID);
      toMapResult.put("accessToken", accessToken);
      return toMapResult;
    }
    static CieloCredentials fromMap(Map<String, Object> map) {
      CieloCredentials fromMapResult = new CieloCredentials();
      Object clientID = map.get("clientID");
      fromMapResult.clientID = (String)clientID;
      Object accessToken = map.get("accessToken");
      fromMapResult.accessToken = (String)accessToken;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PayResponse {
    private Long paidAmount;
    public Long getPaidAmount() { return paidAmount; }
    public void setPaidAmount(Long setterArg) { this.paidAmount = setterArg; }

    private List<Object> payments;
    public List<Object> getPayments() { return payments; }
    public void setPayments(List<Object> setterArg) { this.payments = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("paidAmount", paidAmount);
      toMapResult.put("payments", payments);
      return toMapResult;
    }
    static PayResponse fromMap(Map<String, Object> map) {
      PayResponse fromMapResult = new PayResponse();
      Object paidAmount = map.get("paidAmount");
      fromMapResult.paidAmount = (paidAmount == null) ? null : ((paidAmount instanceof Integer) ? (Integer)paidAmount : (Long)paidAmount);
      Object payments = map.get("payments");
      fromMapResult.payments = (List<Object>)payments;
      return fromMapResult;
    }
  }

  public interface Result<T> {
    void success(T result);
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface CieloRun {
    void pay(PayParam arg);
    void responsePayments(Result<PayResponse> result);

    /** Sets up an instance of `CieloRun` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, CieloRun api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CieloRun.pay", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              PayParam input = PayParam.fromMap((Map<String, Object>)message);
              api.pay(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CieloRun.responsePayments", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.responsePayments(result -> { wrapped.put("result", result.toMap()); reply.reply(wrapped); });
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
