// Autogenerated from Pigeon (v0.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.adapter;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class CieloChannel {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PayResponse {
    private String id;
    public String getId() { return id; }
    public void setId(String setterArg) { this.id = setterArg; }

    private Long price;
    public Long getPrice() { return price; }
    public void setPrice(Long setterArg) { this.price = setterArg; }

    private Long paidAmount;
    public Long getPaidAmount() { return paidAmount; }
    public void setPaidAmount(Long setterArg) { this.paidAmount = setterArg; }

    private Long pendingAmount;
    public Long getPendingAmount() { return pendingAmount; }
    public void setPendingAmount(Long setterArg) { this.pendingAmount = setterArg; }

    private String reference;
    public String getReference() { return reference; }
    public void setReference(String setterArg) { this.reference = setterArg; }

    private String number;
    public String getNumber() { return number; }
    public void setNumber(String setterArg) { this.number = setterArg; }

    private String notes;
    public String getNotes() { return notes; }
    public void setNotes(String setterArg) { this.notes = setterArg; }

    private Long status;
    public Long getStatus() { return status; }
    public void setStatus(Long setterArg) { this.status = setterArg; }

    private List<Object> items;
    public List<Object> getItems() { return items; }
    public void setItems(List<Object> setterArg) { this.items = setterArg; }

    private List<Object> payments;
    public List<Object> getPayments() { return payments; }
    public void setPayments(List<Object> setterArg) { this.payments = setterArg; }

    private Long createdAt;
    public Long getCreatedAt() { return createdAt; }
    public void setCreatedAt(Long setterArg) { this.createdAt = setterArg; }

    private Long updatedAt;
    public Long getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(Long setterArg) { this.updatedAt = setterArg; }

    private Long releaseDate;
    public Long getReleaseDate() { return releaseDate; }
    public void setReleaseDate(Long setterArg) { this.releaseDate = setterArg; }

    private Long type;
    public Long getType() { return type; }
    public void setType(Long setterArg) { this.type = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("price", price);
      toMapResult.put("paidAmount", paidAmount);
      toMapResult.put("pendingAmount", pendingAmount);
      toMapResult.put("reference", reference);
      toMapResult.put("number", number);
      toMapResult.put("notes", notes);
      toMapResult.put("status", status);
      toMapResult.put("items", items);
      toMapResult.put("payments", payments);
      toMapResult.put("createdAt", createdAt);
      toMapResult.put("updatedAt", updatedAt);
      toMapResult.put("releaseDate", releaseDate);
      toMapResult.put("type", type);
      return toMapResult;
    }
    static PayResponse fromMap(Map<String, Object> map) {
      PayResponse fromMapResult = new PayResponse();
      Object id = map.get("id");
      fromMapResult.id = (String)id;
      Object price = map.get("price");
      fromMapResult.price = (price == null) ? null : ((price instanceof Integer) ? (Integer)price : (Long)price);
      Object paidAmount = map.get("paidAmount");
      fromMapResult.paidAmount = (paidAmount == null) ? null : ((paidAmount instanceof Integer) ? (Integer)paidAmount : (Long)paidAmount);
      Object pendingAmount = map.get("pendingAmount");
      fromMapResult.pendingAmount = (pendingAmount == null) ? null : ((pendingAmount instanceof Integer) ? (Integer)pendingAmount : (Long)pendingAmount);
      Object reference = map.get("reference");
      fromMapResult.reference = (String)reference;
      Object number = map.get("number");
      fromMapResult.number = (String)number;
      Object notes = map.get("notes");
      fromMapResult.notes = (String)notes;
      Object status = map.get("status");
      fromMapResult.status = (status == null) ? null : ((status instanceof Integer) ? (Integer)status : (Long)status);
      Object items = map.get("items");
      fromMapResult.items = (List<Object>)items;
      Object payments = map.get("payments");
      fromMapResult.payments = (List<Object>)payments;
      Object createdAt = map.get("createdAt");
      fromMapResult.createdAt = (createdAt == null) ? null : ((createdAt instanceof Integer) ? (Integer)createdAt : (Long)createdAt);
      Object updatedAt = map.get("updatedAt");
      fromMapResult.updatedAt = (updatedAt == null) ? null : ((updatedAt instanceof Integer) ? (Integer)updatedAt : (Long)updatedAt);
      Object releaseDate = map.get("releaseDate");
      fromMapResult.releaseDate = (releaseDate == null) ? null : ((releaseDate instanceof Integer) ? (Integer)releaseDate : (Long)releaseDate);
      Object type = map.get("type");
      fromMapResult.type = (type == null) ? null : ((type instanceof Integer) ? (Integer)type : (Long)type);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PayParam {
    private CieloCredentials cieloCredentials;
    public CieloCredentials getCieloCredentials() { return cieloCredentials; }
    public void setCieloCredentials(CieloCredentials setterArg) { this.cieloCredentials = setterArg; }

    private Long valorTotal;
    public Long getValorTotal() { return valorTotal; }
    public void setValorTotal(Long setterArg) { this.valorTotal = setterArg; }

    private String reference;
    public String getReference() { return reference; }
    public void setReference(String setterArg) { this.reference = setterArg; }

    private List<Object> items;
    public List<Object> getItems() { return items; }
    public void setItems(List<Object> setterArg) { this.items = setterArg; }

    private String ec;
    public String getEc() { return ec; }
    public void setEc(String setterArg) { this.ec = setterArg; }

    private Long installments;
    public Long getInstallments() { return installments; }
    public void setInstallments(Long setterArg) { this.installments = setterArg; }

    private String email;
    public String getEmail() { return email; }
    public void setEmail(String setterArg) { this.email = setterArg; }

    private Long paymentCode;
    public Long getPaymentCode() { return paymentCode; }
    public void setPaymentCode(Long setterArg) { this.paymentCode = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("cieloCredentials", cieloCredentials.toMap());
      toMapResult.put("valorTotal", valorTotal);
      toMapResult.put("reference", reference);
      toMapResult.put("items", items);
      toMapResult.put("ec", ec);
      toMapResult.put("installments", installments);
      toMapResult.put("email", email);
      toMapResult.put("paymentCode", paymentCode);
      return toMapResult;
    }
    static PayParam fromMap(Map<String, Object> map) {
      PayParam fromMapResult = new PayParam();
      Object cieloCredentials = map.get("cieloCredentials");
      fromMapResult.cieloCredentials = CieloCredentials.fromMap((Map)cieloCredentials);
      Object valorTotal = map.get("valorTotal");
      fromMapResult.valorTotal = (valorTotal == null) ? null : ((valorTotal instanceof Integer) ? (Integer)valorTotal : (Long)valorTotal);
      Object reference = map.get("reference");
      fromMapResult.reference = (String)reference;
      Object items = map.get("items");
      fromMapResult.items = (List<Object>)items;
      Object ec = map.get("ec");
      fromMapResult.ec = (String)ec;
      Object installments = map.get("installments");
      fromMapResult.installments = (installments == null) ? null : ((installments instanceof Integer) ? (Integer)installments : (Long)installments);
      Object email = map.get("email");
      fromMapResult.email = (String)email;
      Object paymentCode = map.get("paymentCode");
      fromMapResult.paymentCode = (paymentCode == null) ? null : ((paymentCode instanceof Integer) ? (Integer)paymentCode : (Long)paymentCode);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CieloCredentials {
    private String clientID;
    public String getClientID() { return clientID; }
    public void setClientID(String setterArg) { this.clientID = setterArg; }

    private String accessToken;
    public String getAccessToken() { return accessToken; }
    public void setAccessToken(String setterArg) { this.accessToken = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("clientID", clientID);
      toMapResult.put("accessToken", accessToken);
      return toMapResult;
    }
    static CieloCredentials fromMap(Map<String, Object> map) {
      CieloCredentials fromMapResult = new CieloCredentials();
      Object clientID = map.get("clientID");
      fromMapResult.clientID = (String)clientID;
      Object accessToken = map.get("accessToken");
      fromMapResult.accessToken = (String)accessToken;
      return fromMapResult;
    }
  }

  public interface Result<T> {
    void success(T result);
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface CieloRun {
    void pay(PayParam arg, Result<PayResponse> result);

    /** Sets up an instance of `CieloRun` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, CieloRun api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CieloRun.pay", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              PayParam input = PayParam.fromMap((Map<String, Object>)message);
              api.pay(input, result -> { wrapped.put("result", result.toMap()); reply.reply(wrapped); });
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
