// Autogenerated from Pigeon (v0.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/services.dart';

class PayResponse {
  String? id;
  int? price;
  int? paidAmount;
  int? pendingAmount;
  String? reference;
  String? number;
  String? notes;
  int? status;
  List<Object?>? items;
  List<Object?>? payments;
  int? createdAt;
  int? updatedAt;
  int? releaseDate;
  int? type;
  String? error;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['id'] = id;
    pigeonMap['price'] = price;
    pigeonMap['paidAmount'] = paidAmount;
    pigeonMap['pendingAmount'] = pendingAmount;
    pigeonMap['reference'] = reference;
    pigeonMap['number'] = number;
    pigeonMap['notes'] = notes;
    pigeonMap['status'] = status;
    pigeonMap['items'] = items;
    pigeonMap['payments'] = payments;
    pigeonMap['createdAt'] = createdAt;
    pigeonMap['updatedAt'] = updatedAt;
    pigeonMap['releaseDate'] = releaseDate;
    pigeonMap['type'] = type;
    pigeonMap['error'] = error;
    return pigeonMap;
  }

  static PayResponse decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PayResponse()
      ..id = pigeonMap['id'] as String?
      ..price = pigeonMap['price'] as int?
      ..paidAmount = pigeonMap['paidAmount'] as int?
      ..pendingAmount = pigeonMap['pendingAmount'] as int?
      ..reference = pigeonMap['reference'] as String?
      ..number = pigeonMap['number'] as String?
      ..notes = pigeonMap['notes'] as String?
      ..status = pigeonMap['status'] as int?
      ..items = pigeonMap['items'] as List<Object?>?
      ..payments = pigeonMap['payments'] as List<Object?>?
      ..createdAt = pigeonMap['createdAt'] as int?
      ..updatedAt = pigeonMap['updatedAt'] as int?
      ..releaseDate = pigeonMap['releaseDate'] as int?
      ..type = pigeonMap['type'] as int?
      ..error = pigeonMap['error'] as String?;
  }
}

class PayParam {
  CieloCredentials? cieloCredentials;
  int? valorTotal;
  String? reference;
  List<Object?>? items;
  String? ec;
  int? installments;
  String? email;
  int? paymentCode;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['cieloCredentials'] = cieloCredentials == null ? null : cieloCredentials!.encode();
    pigeonMap['valorTotal'] = valorTotal;
    pigeonMap['reference'] = reference;
    pigeonMap['items'] = items;
    pigeonMap['ec'] = ec;
    pigeonMap['installments'] = installments;
    pigeonMap['email'] = email;
    pigeonMap['paymentCode'] = paymentCode;
    return pigeonMap;
  }

  static PayParam decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PayParam()
      ..cieloCredentials = pigeonMap['cieloCredentials'] != null
          ? CieloCredentials.decode(pigeonMap['cieloCredentials']!)
          : null
      ..valorTotal = pigeonMap['valorTotal'] as int?
      ..reference = pigeonMap['reference'] as String?
      ..items = pigeonMap['items'] as List<Object?>?
      ..ec = pigeonMap['ec'] as String?
      ..installments = pigeonMap['installments'] as int?
      ..email = pigeonMap['email'] as String?
      ..paymentCode = pigeonMap['paymentCode'] as int?;
  }
}

class CieloCredentials {
  String? clientID;
  String? accessToken;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['clientID'] = clientID;
    pigeonMap['accessToken'] = accessToken;
    return pigeonMap;
  }

  static CieloCredentials decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CieloCredentials()
      ..clientID = pigeonMap['clientID'] as String?
      ..accessToken = pigeonMap['accessToken'] as String?;
  }
}

class CieloRun {
  /// Constructor for [CieloRun].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  CieloRun({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  Future<PayResponse> pay(PayParam arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CieloRun.pay', const StandardMessageCodec(), binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return PayResponse.decode(replyMap['result']!);
    }
  }
}
